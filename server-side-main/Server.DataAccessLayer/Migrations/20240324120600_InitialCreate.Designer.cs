// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.DataAccessLayer.Context;

#nullable disable

namespace Server.DataAccessLayer.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240324120600_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Server.Database.Models.AccountModel", b =>
                {
                    b.Property<ulong>("SocialClubId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("AdminCheckpoints")
                        .HasColumnType("int");

                    b.Property<ulong>("BannedFrom")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("BannedPermanent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BannedReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BannedUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("DiscordId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("HardwareIdExHash")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("HardwareIdHash")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("LastIp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastSelectedCharacterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaxAnimations")
                        .HasColumnType("int");

                    b.Property<int>("MaxCharacters")
                        .HasColumnType("int");

                    b.Property<int>("MaxRoleplayInfos")
                        .HasColumnType("int");

                    b.Property<string>("NameHistory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("OnlineSince")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<int>("SouthCentralPoints")
                        .HasColumnType("int");

                    b.HasKey("SocialClubId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Server.Database.Models.AnimationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Clip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Dictionary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Flags")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Animations");
                });

            modelBuilder.Entity("Server.Database.Models.Banking.BankAccountCharacterAccessModel", b =>
                {
                    b.Property<int>("BankAccountModelId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Owner")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.HasKey("BankAccountModelId", "CharacterModelId");

                    b.HasIndex("CharacterModelId");

                    b.ToTable("BankAccountCharacterAccesses");
                });

            modelBuilder.Entity("Server.Database.Models.Banking.BankAccountGroupRankAccessModel", b =>
                {
                    b.Property<int>("BankAccountModelId")
                        .HasColumnType("int");

                    b.Property<int>("GroupModelId")
                        .HasColumnType("int");

                    b.Property<bool>("Owner")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BankAccountModelId", "GroupModelId");

                    b.HasIndex("GroupModelId");

                    b.ToTable("BankAccountGroupAccesses");
                });

            modelBuilder.Entity("Server.Database.Models.Banking.BankAccountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("BankDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Server.Database.Models.Banking.BankHistoryEntryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BankAccountModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HistoryType")
                        .HasColumnType("int");

                    b.Property<bool>("Income")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PurposeOfUse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountModelId");

                    b.ToTable("BankHistoryEntryModel");
                });

            modelBuilder.Entity("Server.Database.Models.CatalogItemModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("Buyable")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Equippable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MaxLimit")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Pitch")
                        .HasColumnType("float");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<float>("Roll")
                        .HasColumnType("float");

                    b.Property<bool>("Sellable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Stackable")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("Weight")
                        .HasColumnType("float");

                    b.Property<float>("Yaw")
                        .HasColumnType("float");

                    b.Property<float>("ZOffset")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ItemCatalog");
                });

            modelBuilder.Entity("Server.Database.Models.Character.AppearancesModel", b =>
                {
                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<int>("AddbodyblemihesColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "addbodyblemihesColor");

                    b.Property<float>("AddbodyblemihesOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "addbodyblemihesOpacity");

                    b.Property<int>("AddbodyblemihesValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "addbodyblemihesValue");

                    b.Property<int>("AgeingColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "ageingColor");

                    b.Property<float>("AgeingOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "ageingOpacity");

                    b.Property<int>("AgeingValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "ageingValue");

                    b.Property<int>("BlemishesColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "blemishesColor");

                    b.Property<float>("BlemishesOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "blemishesOpacity");

                    b.Property<int>("BlemishesValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "blemishesValue");

                    b.Property<int>("BlushColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "blushColor");

                    b.Property<float>("BlushOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "blushOpacity");

                    b.Property<int>("BlushValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "blushValue");

                    b.Property<int>("BodyblemishesColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "bodyblemishesColor");

                    b.Property<float>("BodyblemishesOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "bodyblemishesOpacity");

                    b.Property<int>("BodyblemishesValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "bodyblemishesValue");

                    b.Property<int>("ChesthairColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "chesthairColor");

                    b.Property<float>("ChesthairOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "chesthairOpacity");

                    b.Property<int>("ChesthairValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "chesthairValue");

                    b.Property<int>("ComplexionColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "complexionColor");

                    b.Property<float>("ComplexionOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "complexionOpacity");

                    b.Property<int>("ComplexionValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "complexionValue");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EyeColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "eyeColor");

                    b.Property<int>("EyebrowsColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "eyebrowsColor");

                    b.Property<float>("EyebrowsOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "eyebrowsOpacity");

                    b.Property<int>("EyebrowsValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "eyebrowsValue");

                    b.Property<int>("FacialhairColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "facialhairColor");

                    b.Property<float>("FacialhairOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "facialhairOpacity");

                    b.Property<int>("FacialhairValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "facialhairValue");

                    b.Property<int>("FrecklesColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "frecklesColor");

                    b.Property<float>("FrecklesOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "frecklesOpacity");

                    b.Property<int>("FrecklesValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "frecklesValue");

                    b.Property<int>("Hair")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "hair");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LipstickColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "lipstickColor");

                    b.Property<float>("LipstickOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "lipstickOpacity");

                    b.Property<int>("LipstickValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "lipstickValue");

                    b.Property<int>("MakeupColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "makeupColor");

                    b.Property<float>("MakeupOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "makeupOpacity");

                    b.Property<int>("MakeupValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "makeupValue");

                    b.Property<int>("PrimHairColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "primHaircolor");

                    b.Property<int>("SecHairColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "secHaircolor");

                    b.Property<int>("SundamageColor")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "sundamageColor");

                    b.Property<float>("SundamageOpacity")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "sundamageOpacity");

                    b.Property<int>("SundamageValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "sundamageValue");

                    b.HasKey("CharacterModelId");

                    b.ToTable("Appearances");

                    b.HasAnnotation("Relational:JsonPropertyName", "appearances");
                });

            modelBuilder.Entity("Server.Database.Models.Character.CharacterModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<ulong>("AccountModelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AnimationIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ushort>("Armor")
                        .HasColumnType("smallint unsigned");

                    b.Property<int>("BodySize")
                        .HasColumnType("int");

                    b.Property<int>("CharacterState")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeathState")
                        .HasColumnType("int");

                    b.Property<int>("Dimension")
                        .HasColumnType("int");

                    b.Property<int>("Father")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<ushort>("Health")
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("JailedByCharacterName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("JailedUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Mother")
                        .HasColumnType("int");

                    b.Property<DateTime>("OnlineSince")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Physique")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<float>("Pitch")
                        .HasColumnType("float");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<float>("Roll")
                        .HasColumnType("float");

                    b.Property<float>("Similarity")
                        .HasColumnType("float");

                    b.Property<float>("SkinSimilarity")
                        .HasColumnType("float");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<int>("Torso")
                        .HasColumnType("int");

                    b.Property<int>("TorsoTexture")
                        .HasColumnType("int");

                    b.Property<float>("Yaw")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AccountModelId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Server.Database.Models.Character.DefinedJobModel", b =>
                {
                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CharacterModelId");

                    b.ToTable("DefinedJobs");

                    b.HasAnnotation("Relational:JsonPropertyName", "job");
                });

            modelBuilder.Entity("Server.Database.Models.Character.FaceFeaturesModel", b =>
                {
                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<float>("BrowHeight")
                        .HasColumnType("float");

                    b.Property<float>("BrowWidth")
                        .HasColumnType("float");

                    b.Property<float>("CheekWidth")
                        .HasColumnType("float");

                    b.Property<float>("CheekboneHeight")
                        .HasColumnType("float");

                    b.Property<float>("CheekboneWidth")
                        .HasColumnType("float");

                    b.Property<float>("ChinLength")
                        .HasColumnType("float");

                    b.Property<float>("ChinPosition")
                        .HasColumnType("float");

                    b.Property<float>("ChinShape")
                        .HasColumnType("float");

                    b.Property<float>("ChinWidth")
                        .HasColumnType("float");

                    b.Property<float>("EyesSize")
                        .HasColumnType("float");

                    b.Property<float>("JawHeight")
                        .HasColumnType("float");

                    b.Property<float>("JawWidth")
                        .HasColumnType("float");

                    b.Property<float>("LipsThickness")
                        .HasColumnType("float");

                    b.Property<float>("NeckWidth")
                        .HasColumnType("float");

                    b.Property<float>("NoseBridge")
                        .HasColumnType("float");

                    b.Property<float>("NoseBridgeShift")
                        .HasColumnType("float");

                    b.Property<float>("NoseHeight")
                        .HasColumnType("float");

                    b.Property<float>("NoseLength")
                        .HasColumnType("float");

                    b.Property<float>("NoseTip")
                        .HasColumnType("float");

                    b.Property<float>("NoseWidth")
                        .HasColumnType("float");

                    b.HasKey("CharacterModelId");

                    b.ToTable("FaceFeatures");

                    b.HasAnnotation("Relational:JsonPropertyName", "faceFeatures");
                });

            modelBuilder.Entity("Server.Database.Models.Character.PersonalLicenseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Warnings")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterModelId");

                    b.ToTable("PersonalLicenses");
                });

            modelBuilder.Entity("Server.Database.Models.Character.TattoosModel", b =>
                {
                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HeadCollection")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "headCollection");

                    b.Property<string>("HeadHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "headHash");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LeftArmCollection")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "leftArmCollection");

                    b.Property<string>("LeftArmHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "leftArmHash");

                    b.Property<string>("LeftLegCollection")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "leftLegCollection");

                    b.Property<string>("LeftLegHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "leftLegHash");

                    b.Property<string>("RightArmCollection")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "rightArmCollection");

                    b.Property<string>("RightArmHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "rightArmHash");

                    b.Property<string>("RightLegCollection")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "rightLegCollection");

                    b.Property<string>("RightLegHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "rightLegHash");

                    b.Property<string>("TorsoCollection")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "torsoCollection");

                    b.Property<string>("TorsoHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "torsoHash");

                    b.HasKey("CharacterModelId");

                    b.ToTable("TattoosModel");

                    b.HasAnnotation("Relational:JsonPropertyName", "tattoos");
                });

            modelBuilder.Entity("Server.Database.Models.CustomLogs.ChatLogModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<ulong>("AccountModelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<int>("ChatType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("AccountModelId");

                    b.HasIndex("CharacterModelId");

                    b.ToTable("ChatLogs");
                });

            modelBuilder.Entity("Server.Database.Models.CustomLogs.CommandLogModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<ulong>("AccountModelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Arguments")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<int>("RequiredPermission")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountModelId");

                    b.HasIndex("CharacterModelId");

                    b.ToTable("CommandLogs");
                });

            modelBuilder.Entity("Server.Database.Models.CustomLogs.UserRecordLogModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<ulong>("AccountModelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int?>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong>("StaffAccountModelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<int>("UserRecordType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountModelId");

                    b.HasIndex("CharacterModelId");

                    b.HasIndex("StaffAccountModelId");

                    b.ToTable("UserRecordLogs");
                });

            modelBuilder.Entity("Server.Database.Models.Delivery.DeliveryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OldStatus")
                        .HasColumnType("int");

                    b.Property<int>("OrderGroupModelId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerVehicleModelId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierCharacterId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierFullName")
                        .HasColumnType("longtext");

                    b.Property<int?>("SupplierGroupModelId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierPhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrderGroupModelId");

                    b.HasIndex("PlayerVehicleModelId");

                    b.HasIndex("SupplierGroupModelId");

                    b.ToTable("Deliveries");

                    b.HasDiscriminator<int>("DeliveryType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Server.Database.Models.File.DirectoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorCharacterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatorCharacterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GroupModelId")
                        .HasColumnType("int");

                    b.Property<string>("LastEditCharacterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReadGroupLevel")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WriteGroupLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupModelId");

                    b.ToTable("Directories");
                });

            modelBuilder.Entity("Server.Database.Models.File.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlockedByCharacterName")
                        .HasColumnType("longtext");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorCharacterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatorCharacterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DirectoryModelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastEditCharacterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryModelId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Server.Database.Models.Group.GroupMemberModel", b =>
                {
                    b.Property<int>("GroupModelId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Owner")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("RankLevel")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Salary")
                        .HasColumnType("int unsigned");

                    b.HasKey("GroupModelId", "CharacterModelId");

                    b.HasIndex("CharacterModelId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Server.Database.Models.Group.GroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaxRanks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasDiscriminator<int>("GroupType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Server.Database.Models.Group.GroupRankModel", b =>
                {
                    b.Property<int>("GroupModelId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupPermission")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("GroupModelId", "Level");

                    b.ToTable("GroupRanks");
                });

            modelBuilder.Entity("Server.Database.Models.Housing.DoorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<uint>("Hash")
                        .HasColumnType("int unsigned");

                    b.Property<int>("HouseModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LockState")
                        .HasColumnType("int");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HouseModelId");

                    b.ToTable("Doors");
                });

            modelBuilder.Entity("Server.Database.Models.Housing.HouseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BlockedOwnership")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GroupModelId")
                        .HasColumnType("int");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<int>("HouseType")
                        .HasColumnType("int");

                    b.Property<int?>("InteriorId")
                        .HasColumnType("int");

                    b.Property<string>("Keys")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LockState")
                        .HasColumnType("int");

                    b.Property<float>("Pitch")
                        .HasColumnType("float");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("RentBankAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("Rentable")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("Roll")
                        .HasColumnType("float");

                    b.Property<int>("StreetDirection")
                        .HasColumnType("int");

                    b.Property<string>("SubName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Yaw")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GroupModelId");

                    b.ToTable("Houses");

                    b.HasDiscriminator<int>("HouseType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Server.Database.Models.Housing.UserShopDataModel", b =>
                {
                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<int>("BillToPay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("GotWarned")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CharacterModelId");

                    b.ToTable("UserShopDatas");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.InventoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GroupCharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("HouseModelId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryType")
                        .HasColumnType("int");

                    b.Property<int?>("ItemClothModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("MaxWeight")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterModelId")
                        .IsUnique();

                    b.HasIndex("HouseModelId")
                        .IsUnique();

                    b.HasIndex("ItemClothModelId")
                        .IsUnique();

                    b.HasIndex("VehicleModelId")
                        .IsUnique();

                    b.ToTable("Inventories");

                    b.HasAnnotation("Relational:JsonPropertyName", "inventory");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CatalogItemModelId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "catalogItemName");

                    b.Property<int?>("Condition")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomData")
                        .HasColumnType("longtext");

                    b.Property<int>("Dimension")
                        .HasColumnType("int");

                    b.Property<string>("DroppedByCharacter")
                        .HasColumnType("longtext");

                    b.Property<int?>("InventoryModelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBought")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStolen")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemState")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<float>("Pitch")
                        .HasColumnType("float");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<float>("Roll")
                        .HasColumnType("float");

                    b.Property<int?>("Slot")
                        .HasColumnType("int");

                    b.Property<float>("Yaw")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CatalogItemModelId");

                    b.HasIndex("InventoryModelId");

                    b.ToTable("Items");

                    b.HasDiscriminator<int>("ItemType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.Phone.PhoneChatModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ItemPhoneModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ItemPhoneModelId");

                    b.ToTable("PhoneChats");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.Phone.PhoneContactModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ItemPhoneModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ItemPhoneModelId");

                    b.ToTable("PhoneContacts");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.Phone.PhoneMessageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatModelId")
                        .HasColumnType("int");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Local")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("SenderPhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TargetPhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ChatModelId");

                    b.ToTable("PhoneMessages");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.Phone.PhoneNotificationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ItemPhoneModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemPhoneModelId");

                    b.ToTable("PhoneNotifications");
                });

            modelBuilder.Entity("Server.Database.Models.Mail.MailAccountCharacterAccessModel", b =>
                {
                    b.Property<string>("MailAccountModelMailAddress")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Owner")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.HasKey("MailAccountModelMailAddress", "CharacterModelId");

                    b.HasIndex("CharacterModelId");

                    b.ToTable("MailAccountCharacterAccessModel");
                });

            modelBuilder.Entity("Server.Database.Models.Mail.MailAccountGroupAccessModel", b =>
                {
                    b.Property<string>("MailAccountModelMailAddress")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("GroupModelId")
                        .HasColumnType("int");

                    b.Property<bool>("Owner")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("MailAccountModelMailAddress", "GroupModelId");

                    b.HasIndex("GroupModelId");

                    b.ToTable("MailAccountGroupAccessModel");
                });

            modelBuilder.Entity("Server.Database.Models.Mail.MailAccountModel", b =>
                {
                    b.Property<string>("MailAddress")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("MailAddress");

                    b.ToTable("MailAccounts");
                });

            modelBuilder.Entity("Server.Database.Models.Mail.MailLinkModel", b =>
                {
                    b.Property<string>("MailAccountModelMailAddress")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MailModelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAuthor")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("MailAccountModelMailAddress", "MailModelId");

                    b.HasIndex("MailModelId");

                    b.ToTable("MailLinkModel");
                });

            modelBuilder.Entity("Server.Database.Models.Mail.MailModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MailReadedFromAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SenderMailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Mails");
                });

            modelBuilder.Entity("Server.Database.Models.Mdc.BulletInEntryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorCharacterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("BulletInEntries");
                });

            modelBuilder.Entity("Server.Database.Models.Mdc.CriminalRecordModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorCharacterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CharacterModelId");

                    b.ToTable("CriminalRecords");
                });

            modelBuilder.Entity("Server.Database.Models.Mdc.EmergencyCallModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Situation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EmergencyCalls");
                });

            modelBuilder.Entity("Server.Database.Models.Mdc.MdcAllergyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorCharacterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterModelId");

                    b.ToTable("MdcAllergies");
                });

            modelBuilder.Entity("Server.Database.Models.Mdc.MdcMedicalEntryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorCharacterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterModelId");

                    b.ToTable("MdcMedicalEntries");
                });

            modelBuilder.Entity("Server.Database.Models.Mdc.MdcNoteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorCharacterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TargetModelId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MdcNodes");
                });

            modelBuilder.Entity("Server.Database.Models.RegistrationOfficeEntryModel", b =>
                {
                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CharacterModelId");

                    b.ToTable("RegistrationOfficeEntries");
                });

            modelBuilder.Entity("Server.Database.Models.RoleplayInfoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Dimension")
                        .HasColumnType("int");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong>("MarkerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<float>("Pitch")
                        .HasColumnType("float");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<float>("Roll")
                        .HasColumnType("float");

                    b.Property<float>("Yaw")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CharacterModelId");

                    b.ToTable("RoleplayInfos");
                });

            modelBuilder.Entity("Server.Database.Models.Vehicles.CatalogVehicleModel", b =>
                {
                    b.Property<string>("Model")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "model");

                    b.Property<int>("AmountOfOrderableVehicles")
                        .HasColumnType("int");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "classId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayClass")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "displayClass");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "displayName");

                    b.Property<string>("DlcName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "dlcName");

                    b.Property<int>("FuelType")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "fuelType");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaxTank")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "maxTank");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.HasKey("Model");

                    b.ToTable("VehicleCatalog");
                });

            modelBuilder.Entity("Server.Database.Models.Vehicles.OrderedVehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CatalogVehicleModelId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DeliverdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DeliveryRequestedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeliveryRequestedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GroupModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CatalogVehicleModelId");

                    b.ToTable("OrderedVehicles");
                });

            modelBuilder.Entity("Server.Database.Models.Vehicles.PlayerVehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Aerials")
                        .HasColumnType("int");

                    b.Property<int>("AirFilter")
                        .HasColumnType("int");

                    b.Property<int>("ArchCover")
                        .HasColumnType("int");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("BackWheels")
                        .HasColumnType("int");

                    b.Property<uint>("BodyHealth")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Boost")
                        .HasColumnType("int");

                    b.Property<int>("Brakes")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Dashboard")
                        .HasColumnType("int");

                    b.Property<int>("DialDesign")
                        .HasColumnType("int");

                    b.Property<int>("Dimension")
                        .HasColumnType("int");

                    b.Property<int>("DoorSpeaker")
                        .HasColumnType("int");

                    b.Property<float>("DrivenKilometre")
                        .HasColumnType("float");

                    b.Property<int>("Engine")
                        .HasColumnType("int");

                    b.Property<int>("EngineBlock")
                        .HasColumnType("int");

                    b.Property<int>("EngineHealth")
                        .HasColumnType("int");

                    b.Property<bool>("EngineOn")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Exhaust")
                        .HasColumnType("int");

                    b.Property<int>("Fender")
                        .HasColumnType("int");

                    b.Property<int>("Frame")
                        .HasColumnType("int");

                    b.Property<int>("FrontBumper")
                        .HasColumnType("int");

                    b.Property<int>("FrontWheels")
                        .HasColumnType("int");

                    b.Property<float>("Fuel")
                        .HasColumnType("float");

                    b.Property<int>("Grille")
                        .HasColumnType("int");

                    b.Property<int?>("GroupModelOwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Hood")
                        .HasColumnType("int");

                    b.Property<int>("Horns")
                        .HasColumnType("int");

                    b.Property<int>("Hydraulics")
                        .HasColumnType("int");

                    b.Property<string>("Keys")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastDrivers")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Livery")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("LockState")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumberplateText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Ornaments")
                        .HasColumnType("int");

                    b.Property<float>("Pitch")
                        .HasColumnType("float");

                    b.Property<int>("Plaques")
                        .HasColumnType("int");

                    b.Property<int>("Plate")
                        .HasColumnType("int");

                    b.Property<int>("PlateHolder")
                        .HasColumnType("int");

                    b.Property<int>("PlateVanity")
                        .HasColumnType("int");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryColor")
                        .HasColumnType("int");

                    b.Property<int>("RearBumper")
                        .HasColumnType("int");

                    b.Property<int>("RightFender")
                        .HasColumnType("int");

                    b.Property<float>("Roll")
                        .HasColumnType("float");

                    b.Property<int>("Roof")
                        .HasColumnType("int");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryColor")
                        .HasColumnType("int");

                    b.Property<int>("ShiftLever")
                        .HasColumnType("int");

                    b.Property<int>("SideSkirt")
                        .HasColumnType("int");

                    b.Property<int>("Speaker")
                        .HasColumnType("int");

                    b.Property<int>("Spoilers")
                        .HasColumnType("int");

                    b.Property<int>("SteeringWheel")
                        .HasColumnType("int");

                    b.Property<int>("Struts")
                        .HasColumnType("int");

                    b.Property<int>("Suspension")
                        .HasColumnType("int");

                    b.Property<int>("Tank")
                        .HasColumnType("int");

                    b.Property<int>("Transmission")
                        .HasColumnType("int");

                    b.Property<int>("Trim")
                        .HasColumnType("int");

                    b.Property<int>("TrimDesign")
                        .HasColumnType("int");

                    b.Property<int>("Trunk")
                        .HasColumnType("int");

                    b.Property<int>("Turbo")
                        .HasColumnType("int");

                    b.Property<int>("VehicleState")
                        .HasColumnType("int");

                    b.Property<int>("WindowTint")
                        .HasColumnType("int");

                    b.Property<int>("Windows")
                        .HasColumnType("int");

                    b.Property<int>("Xenon")
                        .HasColumnType("int");

                    b.Property<float>("Yaw")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CharacterModelId");

                    b.HasIndex("GroupModelOwnerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Server.Database.Models.Vehicles.PublicGarageEntryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GarageId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PlayerVehicleModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterModelId");

                    b.HasIndex("GroupModelId");

                    b.HasIndex("PlayerVehicleModelId");

                    b.ToTable("PublicGarageEntries");
                });

            modelBuilder.Entity("Server.Database.Models.Delivery.ProductDeliveryModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Delivery.DeliveryModel");

                    b.Property<int>("OrderedProducts")
                        .HasColumnType("int");

                    b.Property<int>("ProductsRemaining")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Server.Database.Models.Delivery.VehicleDeliveryModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Delivery.DeliveryModel");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VehicleModel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Server.Database.Models.Group.CompanyGroupModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Group.GroupModel");

                    b.Property<int>("DeliveryVisibilityStatus")
                        .HasColumnType("int");

                    b.Property<int>("LicensesFlags")
                        .HasColumnType("int");

                    b.Property<ulong?>("MarkerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Products")
                        .HasColumnType("int");

                    b.Property<int>("PurchasedLicenses")
                        .HasColumnType("int");

                    b.Property<float?>("VehicleInteractionPointPitch")
                        .HasColumnType("float");

                    b.Property<float?>("VehicleInteractionPointRoll")
                        .HasColumnType("float");

                    b.Property<float?>("VehicleInteractionPointX")
                        .HasColumnType("float");

                    b.Property<float?>("VehicleInteractionPointY")
                        .HasColumnType("float");

                    b.Property<float?>("VehicleInteractionPointYaw")
                        .HasColumnType("float");

                    b.Property<float?>("VehicleInteractionPointZ")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Server.Database.Models.Group.FactionGroupModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Group.GroupModel");

                    b.Property<int>("FactionType")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Server.Database.Models.Group.GangGroupModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Group.GroupModel");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Server.Database.Models.Group.MafiaGroupModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Group.GroupModel");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Server.Database.Models.Housing.LeaseCompanyHouseModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Housing.HouseModel");

                    b.Property<float?>("CashierHeading")
                        .HasColumnType("float");

                    b.Property<float?>("CashierX")
                        .HasColumnType("float");

                    b.Property<float?>("CashierY")
                        .HasColumnType("float");

                    b.Property<float?>("CashierZ")
                        .HasColumnType("float");

                    b.Property<bool>("HasCashier")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LeaseCompanyType")
                        .HasColumnType("int");

                    b.Property<int>("PlayerDuties")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemClothModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Inventory.ItemModel");

                    b.Property<byte>("DrawableId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("GenderType")
                        .HasColumnType("int");

                    b.Property<byte>("TextureId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemDrugModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Inventory.ItemModel");

                    b.HasDiscriminator().HasValue(11);
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemFoodModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Inventory.ItemModel");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemGroupKeyModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Inventory.ItemModel");

                    b.Property<int?>("GroupModelId")
                        .HasColumnType("int");

                    b.ToTable("Items", t =>
                        {
                            t.Property("GroupModelId")
                                .HasColumnName("ItemGroupKeyModel_GroupModelId");
                        });

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemHandCuffModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Inventory.ItemModel");

                    b.Property<int?>("GroupModelId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemKeyModelId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemKeyModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Inventory.ItemModel");

                    b.Property<int?>("HouseModelId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerVehicleModelId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemPhoneModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Inventory.ItemModel");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BackgroundImageId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentOwnerId")
                        .HasColumnType("int");

                    b.Property<int>("InitialOwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastTimeOpenedNotifications")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemPoliceTicketModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Inventory.ItemModel");

                    b.Property<int>("Costs")
                        .HasColumnType("int");

                    b.Property<string>("CreatorCharacterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Payed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TargetCharacterId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(12);
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemRadioModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Inventory.ItemModel");

                    b.Property<int>("FactionType")
                        .HasColumnType("int");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemWeaponAmmoModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Inventory.ItemModel");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemWeaponAttachmentModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Inventory.ItemModel");

                    b.Property<int?>("ItemModelWeaponId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemWeaponId")
                        .HasColumnType("int");

                    b.HasIndex("ItemModelWeaponId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemWeaponModel", b =>
                {
                    b.HasBaseType("Server.Database.Models.Inventory.ItemModel");

                    b.Property<string>("ComponentHashes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("InitialOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("longtext");

                    b.ToTable("Items", t =>
                        {
                            t.Property("InitialOwnerId")
                                .HasColumnName("ItemWeaponModel_InitialOwnerId");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Server.Database.Models.Banking.BankAccountCharacterAccessModel", b =>
                {
                    b.HasOne("Server.Database.Models.Banking.BankAccountModel", "BankAccountModel")
                        .WithMany("CharacterAccesses")
                        .HasForeignKey("BankAccountModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany()
                        .HasForeignKey("CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccountModel");

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.Banking.BankAccountGroupRankAccessModel", b =>
                {
                    b.HasOne("Server.Database.Models.Banking.BankAccountModel", "BankAccountModel")
                        .WithMany("GroupRankAccess")
                        .HasForeignKey("BankAccountModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Models.Group.GroupModel", "GroupModel")
                        .WithMany()
                        .HasForeignKey("GroupModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccountModel");

                    b.Navigation("GroupModel");
                });

            modelBuilder.Entity("Server.Database.Models.Banking.BankHistoryEntryModel", b =>
                {
                    b.HasOne("Server.Database.Models.Banking.BankAccountModel", "BankAccountModel")
                        .WithMany("History")
                        .HasForeignKey("BankAccountModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccountModel");
                });

            modelBuilder.Entity("Server.Database.Models.Character.AppearancesModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithOne("AppearancesModel")
                        .HasForeignKey("Server.Database.Models.Character.AppearancesModel", "CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.Character.CharacterModel", b =>
                {
                    b.HasOne("Server.Database.Models.AccountModel", "AccountModel")
                        .WithMany("Characters")
                        .HasForeignKey("AccountModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountModel");
                });

            modelBuilder.Entity("Server.Database.Models.Character.DefinedJobModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithOne("JobModel")
                        .HasForeignKey("Server.Database.Models.Character.DefinedJobModel", "CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.Character.FaceFeaturesModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithOne("FaceFeaturesModel")
                        .HasForeignKey("Server.Database.Models.Character.FaceFeaturesModel", "CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.Character.PersonalLicenseModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany("Licenses")
                        .HasForeignKey("CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.Character.TattoosModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithOne("TattoosModel")
                        .HasForeignKey("Server.Database.Models.Character.TattoosModel", "CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.CustomLogs.ChatLogModel", b =>
                {
                    b.HasOne("Server.Database.Models.AccountModel", "AccountModel")
                        .WithMany("ChatLogs")
                        .HasForeignKey("AccountModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany()
                        .HasForeignKey("CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountModel");

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.CustomLogs.CommandLogModel", b =>
                {
                    b.HasOne("Server.Database.Models.AccountModel", "AccountModel")
                        .WithMany("CommandLogs")
                        .HasForeignKey("AccountModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany()
                        .HasForeignKey("CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountModel");

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.CustomLogs.UserRecordLogModel", b =>
                {
                    b.HasOne("Server.Database.Models.AccountModel", "AccountModel")
                        .WithMany("UserRecords")
                        .HasForeignKey("AccountModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany()
                        .HasForeignKey("CharacterModelId");

                    b.HasOne("Server.Database.Models.AccountModel", "StaffAccountModel")
                        .WithMany()
                        .HasForeignKey("StaffAccountModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountModel");

                    b.Navigation("CharacterModel");

                    b.Navigation("StaffAccountModel");
                });

            modelBuilder.Entity("Server.Database.Models.Delivery.DeliveryModel", b =>
                {
                    b.HasOne("Server.Database.Models.Group.GroupModel", "OrderGroupModel")
                        .WithMany()
                        .HasForeignKey("OrderGroupModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Models.Vehicles.PlayerVehicleModel", "PlayerVehicleModel")
                        .WithMany()
                        .HasForeignKey("PlayerVehicleModelId");

                    b.HasOne("Server.Database.Models.Group.GroupModel", "SupplierGroupModel")
                        .WithMany()
                        .HasForeignKey("SupplierGroupModelId");

                    b.Navigation("OrderGroupModel");

                    b.Navigation("PlayerVehicleModel");

                    b.Navigation("SupplierGroupModel");
                });

            modelBuilder.Entity("Server.Database.Models.File.DirectoryModel", b =>
                {
                    b.HasOne("Server.Database.Models.Group.GroupModel", "GroupModel")
                        .WithMany()
                        .HasForeignKey("GroupModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupModel");
                });

            modelBuilder.Entity("Server.Database.Models.File.FileModel", b =>
                {
                    b.HasOne("Server.Database.Models.File.DirectoryModel", "DirectoryModel")
                        .WithMany("Files")
                        .HasForeignKey("DirectoryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectoryModel");
                });

            modelBuilder.Entity("Server.Database.Models.Group.GroupMemberModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany()
                        .HasForeignKey("CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Models.Group.GroupModel", "GroupModel")
                        .WithMany("Members")
                        .HasForeignKey("GroupModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");

                    b.Navigation("GroupModel");
                });

            modelBuilder.Entity("Server.Database.Models.Group.GroupRankModel", b =>
                {
                    b.HasOne("Server.Database.Models.Group.GroupModel", "GroupModel")
                        .WithMany("Ranks")
                        .HasForeignKey("GroupModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupModel");
                });

            modelBuilder.Entity("Server.Database.Models.Housing.DoorModel", b =>
                {
                    b.HasOne("Server.Database.Models.Housing.HouseModel", "HouseModel")
                        .WithMany("Doors")
                        .HasForeignKey("HouseModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HouseModel");
                });

            modelBuilder.Entity("Server.Database.Models.Housing.HouseModel", b =>
                {
                    b.HasOne("Server.Database.Models.Group.GroupModel", "GroupModel")
                        .WithMany("Houses")
                        .HasForeignKey("GroupModelId");

                    b.Navigation("GroupModel");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.InventoryModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithOne("InventoryModel")
                        .HasForeignKey("Server.Database.Models.Inventory.InventoryModel", "CharacterModelId");

                    b.HasOne("Server.Database.Models.Housing.HouseModel", "HouseModel")
                        .WithOne("Inventory")
                        .HasForeignKey("Server.Database.Models.Inventory.InventoryModel", "HouseModelId");

                    b.HasOne("Server.Database.Models.Inventory.ItemClothModel", "ItemClothModel")
                        .WithOne("ClothingInventoryModel")
                        .HasForeignKey("Server.Database.Models.Inventory.InventoryModel", "ItemClothModelId");

                    b.HasOne("Server.Database.Models.Vehicles.PlayerVehicleModel", "VehicleModel")
                        .WithOne("InventoryModel")
                        .HasForeignKey("Server.Database.Models.Inventory.InventoryModel", "VehicleModelId");

                    b.Navigation("CharacterModel");

                    b.Navigation("HouseModel");

                    b.Navigation("ItemClothModel");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemModel", b =>
                {
                    b.HasOne("Server.Database.Models.CatalogItemModel", "CatalogItemModel")
                        .WithMany()
                        .HasForeignKey("CatalogItemModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Models.Inventory.InventoryModel", "InventoryModel")
                        .WithMany("Items")
                        .HasForeignKey("InventoryModelId");

                    b.Navigation("CatalogItemModel");

                    b.Navigation("InventoryModel");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.Phone.PhoneChatModel", b =>
                {
                    b.HasOne("Server.Database.Models.Inventory.ItemPhoneModel", "ItemPhoneModel")
                        .WithMany("Chats")
                        .HasForeignKey("ItemPhoneModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemPhoneModel");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.Phone.PhoneContactModel", b =>
                {
                    b.HasOne("Server.Database.Models.Inventory.ItemPhoneModel", "ItemPhoneModel")
                        .WithMany("Contacts")
                        .HasForeignKey("ItemPhoneModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemPhoneModel");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.Phone.PhoneMessageModel", b =>
                {
                    b.HasOne("Server.Database.Models.Inventory.Phone.PhoneChatModel", "ChatModel")
                        .WithMany("Messages")
                        .HasForeignKey("ChatModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatModel");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.Phone.PhoneNotificationModel", b =>
                {
                    b.HasOne("Server.Database.Models.Inventory.ItemPhoneModel", "ItemPhoneModel")
                        .WithMany("Notifications")
                        .HasForeignKey("ItemPhoneModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemPhoneModel");
                });

            modelBuilder.Entity("Server.Database.Models.Mail.MailAccountCharacterAccessModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany()
                        .HasForeignKey("CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Models.Mail.MailAccountModel", "MailAccountModel")
                        .WithMany("CharacterAccesses")
                        .HasForeignKey("MailAccountModelMailAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");

                    b.Navigation("MailAccountModel");
                });

            modelBuilder.Entity("Server.Database.Models.Mail.MailAccountGroupAccessModel", b =>
                {
                    b.HasOne("Server.Database.Models.Group.GroupModel", "GroupModel")
                        .WithMany()
                        .HasForeignKey("GroupModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Models.Mail.MailAccountModel", "MailAccountModel")
                        .WithMany("GroupAccess")
                        .HasForeignKey("MailAccountModelMailAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupModel");

                    b.Navigation("MailAccountModel");
                });

            modelBuilder.Entity("Server.Database.Models.Mail.MailLinkModel", b =>
                {
                    b.HasOne("Server.Database.Models.Mail.MailAccountModel", "MailAccountModel")
                        .WithMany("MailLinks")
                        .HasForeignKey("MailAccountModelMailAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Models.Mail.MailModel", "MailModel")
                        .WithMany("MailLinks")
                        .HasForeignKey("MailModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MailAccountModel");

                    b.Navigation("MailModel");
                });

            modelBuilder.Entity("Server.Database.Models.Mdc.CriminalRecordModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany()
                        .HasForeignKey("CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.Mdc.MdcAllergyModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany()
                        .HasForeignKey("CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.Mdc.MdcMedicalEntryModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany()
                        .HasForeignKey("CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.RegistrationOfficeEntryModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithOne("RegistrationOfficeEntryModel")
                        .HasForeignKey("Server.Database.Models.RegistrationOfficeEntryModel", "CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.RoleplayInfoModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany()
                        .HasForeignKey("CharacterModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");
                });

            modelBuilder.Entity("Server.Database.Models.Vehicles.OrderedVehicleModel", b =>
                {
                    b.HasOne("Server.Database.Models.Vehicles.CatalogVehicleModel", "CatalogVehicleModel")
                        .WithMany()
                        .HasForeignKey("CatalogVehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogVehicleModel");
                });

            modelBuilder.Entity("Server.Database.Models.Vehicles.PlayerVehicleModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany()
                        .HasForeignKey("CharacterModelId");

                    b.HasOne("Server.Database.Models.Group.GroupModel", "GroupModelOwner")
                        .WithMany()
                        .HasForeignKey("GroupModelOwnerId");

                    b.Navigation("CharacterModel");

                    b.Navigation("GroupModelOwner");
                });

            modelBuilder.Entity("Server.Database.Models.Vehicles.PublicGarageEntryModel", b =>
                {
                    b.HasOne("Server.Database.Models.Character.CharacterModel", "CharacterModel")
                        .WithMany()
                        .HasForeignKey("CharacterModelId");

                    b.HasOne("Server.Database.Models.Group.GroupModel", "GroupModel")
                        .WithMany()
                        .HasForeignKey("GroupModelId");

                    b.HasOne("Server.Database.Models.Vehicles.PlayerVehicleModel", "PlayerVehicleModel")
                        .WithMany()
                        .HasForeignKey("PlayerVehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterModel");

                    b.Navigation("GroupModel");

                    b.Navigation("PlayerVehicleModel");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemWeaponAttachmentModel", b =>
                {
                    b.HasOne("Server.Database.Models.Inventory.ItemWeaponModel", "ItemModelWeapon")
                        .WithMany()
                        .HasForeignKey("ItemModelWeaponId");

                    b.Navigation("ItemModelWeapon");
                });

            modelBuilder.Entity("Server.Database.Models.AccountModel", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("ChatLogs");

                    b.Navigation("CommandLogs");

                    b.Navigation("UserRecords");
                });

            modelBuilder.Entity("Server.Database.Models.Banking.BankAccountModel", b =>
                {
                    b.Navigation("CharacterAccesses");

                    b.Navigation("GroupRankAccess");

                    b.Navigation("History");
                });

            modelBuilder.Entity("Server.Database.Models.Character.CharacterModel", b =>
                {
                    b.Navigation("AppearancesModel")
                        .IsRequired();

                    b.Navigation("FaceFeaturesModel")
                        .IsRequired();

                    b.Navigation("InventoryModel")
                        .IsRequired();

                    b.Navigation("JobModel");

                    b.Navigation("Licenses");

                    b.Navigation("RegistrationOfficeEntryModel");

                    b.Navigation("TattoosModel")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Database.Models.File.DirectoryModel", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Server.Database.Models.Group.GroupModel", b =>
                {
                    b.Navigation("Houses");

                    b.Navigation("Members");

                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("Server.Database.Models.Housing.HouseModel", b =>
                {
                    b.Navigation("Doors");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.InventoryModel", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.Phone.PhoneChatModel", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Server.Database.Models.Mail.MailAccountModel", b =>
                {
                    b.Navigation("CharacterAccesses");

                    b.Navigation("GroupAccess");

                    b.Navigation("MailLinks");
                });

            modelBuilder.Entity("Server.Database.Models.Mail.MailModel", b =>
                {
                    b.Navigation("MailLinks");
                });

            modelBuilder.Entity("Server.Database.Models.Vehicles.PlayerVehicleModel", b =>
                {
                    b.Navigation("InventoryModel");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemClothModel", b =>
                {
                    b.Navigation("ClothingInventoryModel");
                });

            modelBuilder.Entity("Server.Database.Models.Inventory.ItemPhoneModel", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Contacts");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
